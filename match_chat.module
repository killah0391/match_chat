<?php

/**
 * @file
 * Contains match_chat.module.
 *
 * Provides one-to-one chat functionality and related features.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\match_chat\Entity\MatchMessageInterface;
use Drupal\match_chat\Entity\MatchThreadInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function match_chat_theme()
{
  return [
    'match_thread' => [ // Your existing theme hook
      'variables' => [
        'thread' => NULL,
        'messages_list' => NULL,
        'message_form' => NULL,
        'chat_settings_popover_form' => NULL,
        'current_user_entity' => NULL,
        'other_user_entity' => NULL,
      ],
      'template' => 'match-thread',
    ],
    'match_message' => [ // Your existing theme hook
      'variables' => [
        'message_entity' => NULL,
        'content' => NULL,
        'sender_name' => NULL,
        'message_text' => NULL,
        'created_formatted' => NULL,
        'is_sender' => FALSE,
      ],
      'template' => 'match-message',
    ],
    'match_threads_list' => [ // New theme hook
      'variables' => [
        'threads' => [],
        'empty_message' => '',
        'selected_thread_uuid' => NULL,
        'selected_thread_content' => [],
      ],
      'template' => 'match-threads-list', // This points to match-threads-list.html.twig
    ],
  ];
}

/**
 * Implements hook_entity_access() for 'match_message'.
 *
 * This is an optional, more advanced step if you want to control visibility
 * of *existing* messages based on block status. The current implementation
 * primarily prevents *new* messages. If you enable this, test thoroughly
 * as it can affect message loading everywhere.
 */
/*
function match_chat_match_message_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Note: $entity is MatchMessageInterface here.
  // @var \Drupal\match_chat\Entity\MatchMessageInterface $message
  $message = $entity;

  if ($operation === 'view' && !$account->hasPermission('administer site configuration')) { // Admins can see all.
    $thread_id = $message->getThreadId();
    if (!$thread_id) {
      return AccessResult::neutral()->addCacheableDependency($message);
    }

    $entity_type_manager = \Drupal::service('entity_type.manager');
    // @var \Drupal\match_chat\Entity\MatchThreadInterface|null $thread
    $thread = $entity_type_manager->getStorage('match_thread')->load($thread_id);
    // @var \Drupal\user\UserInterface|null $viewer
    $viewer = $entity_type_manager->getStorage('user')->load($account->id());
    // @var \Drupal\user\UserInterface|null $sender
    $sender = $message->getOwner();

    if ($thread && $viewer && $sender) {
      // If the viewer is not a participant of the thread, deny access.
      // (This should also be covered by general entity query access, but good to be explicit).
      if (!$thread->isParticipant($viewer)) {
        return AccessResult::forbidden("You are not a participant of this chat thread.")->addCacheableDependency($thread)->addCacheableDependency($viewer);
      }

      // Determine the other participant relative to the viewer.
      $user1 = $thread->getUser1();
      $user2 = $thread->getUser2();
      $other_participant_for_viewer = NULL;
      if ($user1 && $user1->id() === $viewer->id()) {
        $other_participant_for_viewer = $user2;
      } elseif ($user2 && $user2->id() === $viewer->id()) {
        $other_participant_for_viewer = $user1;
      }

      if ($other_participant_for_viewer) {
        // Case 1: Viewer has blocked the sender (who is the other participant).
        // If the sender of the message IS the other participant, and the viewer has blocked them.
        if ($sender->id() === $other_participant_for_viewer->id() && $thread->hasUserBlockedOther($viewer)) {
          // Decide if viewer should see messages from someone they blocked.
          // return AccessResult::forbidden("You have blocked the sender of this message.")->addCacheableDependency($thread)->addCacheableDependency($viewer);
        }

        // Case 2: Viewer is blocked by the sender (who is the other participant).
        // If the sender of the message IS the other participant, and they have blocked the viewer.
        if ($sender->id() === $other_participant_for_viewer->id() && $thread->isUserBlockedByOther($viewer)) {
          // Viewer should likely not see messages from someone who blocked them.
          return AccessResult::forbidden("The sender of this message has blocked you.")->addCacheableDependency($thread)->addCacheableDependency($viewer);
        }
      }
    } else {
      // Could not load necessary entities, deny access for safety.
      return AccessResult::forbidden("Cannot determine message access due to missing data.")->addCacheableDependency($message);
    }
  }
  return AccessResult::neutral()->addCacheableDependency($message); // Let other modules decide.
}
*/

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function match_chat_match_message_presave(EntityInterface $entity)
{
  /** @var \Drupal\match_chat\Entity\MatchMessageInterface $message */
  $message = $entity;
  $file_usage = \Drupal::service('file.usage');

  // 1. Set newly uploaded files to permanent status.
  // File usage will be added in hook_insert() or hook_update().
  if ($message->hasField('chat_images') && !$message->get('chat_images')->isEmpty()) {
    foreach ($message->get('chat_images') as $file_item) {
      if ($file_item->entity instanceof FileInterface) {
        /** @var \Drupal\file\FileInterface $file */
        $file = $file_item->entity;
        if ($file->isTemporary()) {
          $file->setPermanent();
          $file->save();
        }
      }
    }
  }

  // 2. Handle removed files if the entity is being updated (not new).
  // For existing entities, $message->id() is available.
  if (!$message->isNew() && isset($message->original) && $message->original instanceof EntityInterface) {
    /** @var \Drupal\match_chat\Entity\MatchMessageInterface $original_message */
    $original_message = $message->original;

    if ($original_message->hasField('chat_images') && $message->hasField('chat_images')) {
      $current_fids = [];
      foreach ($message->get('chat_images') as $file_item) {
        if ($file_item->target_id) {
          $current_fids[] = $file_item->target_id;
        }
      }

      $original_fids = [];
      foreach ($original_message->get('chat_images') as $file_item) {
        if ($file_item->target_id) {
          $original_fids[] = $file_item->target_id;
        }
      }

      $removed_fids = array_diff($original_fids, $current_fids);
      if (!empty($removed_fids)) {
        $files_to_remove_usage = \Drupal::entityTypeManager()->getStorage('file')->loadMultiple($removed_fids);
        foreach ($files_to_remove_usage as $file_to_remove) {
          if ($file_to_remove instanceof FileInterface) {
            $file_usage->delete($file_to_remove, 'match_chat', 'match_message', $message->id());
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Called after a new entity has been saved.
 */
function match_chat_match_message_insert(EntityInterface $entity)
{
  /** @var \Drupal\match_chat\Entity\MatchMessageInterface $message */
  $message = $entity;
  $file_usage = \Drupal::service('file.usage');

  // Add file usage for all files on the newly inserted entity.
  // $message->id() is now available.
  if ($message->hasField('chat_images') && !$message->get('chat_images')->isEmpty()) {
    foreach ($message->get('chat_images') as $file_item) {
      if ($file_item->entity instanceof FileInterface) {
        /** @var \Drupal\file\FileInterface $file */
        $file = $file_item->entity;
        // Ensure file is permanent (presave should have handled this, but good for safety)
        if (!$file->isPermanent()) {
          $file->setPermanent();
          $file->save();
        }
        $file_usage->add($file, 'match_chat', 'match_message', $message->id());
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Called after an existing entity has been saved.
 */
function match_chat_match_message_update(EntityInterface $entity)
{
  /** @var \Drupal\match_chat\Entity\MatchMessageInterface $message */
  $message = $entity;
  $file_usage = \Drupal::service('file.usage');

  // Handle newly added files during an update.
  // Removed files' usage is handled in presave.
  // Existing files' usage was handled on insert or previous update.
  if (
    isset($message->original) && $message->original instanceof EntityInterface &&
    $message->hasField('chat_images') && $message->original->hasField('chat_images')
  ) {

    /** @var \Drupal\match_chat\Entity\MatchMessageInterface $original_message */
    $original_message = $message->original;

    $current_file_references = $message->get('chat_images')->referencedEntities();
    $original_file_references = $original_message->get('chat_images')->referencedEntities();

    $current_fids = array_map(function ($file) {
      return $file->id();
    }, $current_file_references);
    $original_fids = array_map(function ($file) {
      return $file->id();
    }, $original_file_references);

    $added_fids = array_diff($current_fids, $original_fids);

    if (!empty($added_fids)) {
      $newly_added_files = \Drupal::entityTypeManager()->getStorage('file')->loadMultiple($added_fids);
      foreach ($newly_added_files as $file) {
        if ($file instanceof FileInterface) {
          // Ensure file is permanent (presave should have handled this)
          if (!$file->isPermanent()) {
            $file->setPermanent();
            $file->save();
          }
          $file_usage->add($file, 'match_chat', 'match_message', $message->id());
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function match_chat_match_message_delete(EntityInterface $entity)
{
  /** @var \Drupal\match_chat\Entity\MatchMessageInterface $message */
  $message = $entity;

  if ($message->hasField('chat_images') && !$message->get('chat_images')->isEmpty()) {
    $file_usage = \Drupal::service('file.usage');
    foreach ($message->get('chat_images') as $file_item) {
      if ($file_item->entity instanceof FileInterface) {
        $file_usage->delete($file_item->entity, 'match_chat', 'match_message', $message->id());
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access() for match_message entities.
 *
 * Grants 'view' access to messages for participants of the thread.
 */
function match_chat_match_message_access(EntityInterface $entity, $operation, AccountInterface $account)
{
  /** @var \Drupal\match_chat\Entity\MatchMessageInterface $message */
  $message = $entity;

  // Only apply special logic for the 'view' operation.
  if ($operation === 'view') {
    // Anonymous users should not be able to view any chat messages directly.
    if ($account->isAnonymous()) {
      return AccessResult::forbidden('Anonymous users cannot view chat messages.')->addCacheableDependency($message);
    }

    // Load the full User entity for the account performing the access check.
    // This ensures we can pass it to isParticipant() if needed, though AccountInterface->id() is often enough.
    $user_entity_to_check = \Drupal::entityTypeManager()->getStorage('user')->load($account->id());
    if (!$user_entity_to_check instanceof UserInterface) {
      // This case should be rare for authenticated users but is a safeguard.
      return AccessResult::neutral('Accessing account is not a recognized user.')->addCacheableDependency($message);
    }

    /** @var \Drupal\match_chat\Entity\MatchThreadInterface|null $thread */
    $thread_field_item = $message->get('thread_id');
    if ($thread_field_item->isEmpty() || !$thread_field_item->entity instanceof \Drupal\match_chat\Entity\MatchThreadInterface) {
      // Message is not properly linked to a thread.
      \Drupal::logger('match_chat')->warning('Message ID @mid has no valid thread for access check.', ['@mid' => $message->id()]);
      return AccessResult::forbidden('Message is not associated with a valid thread.')->addCacheableDependency($message);
    }
    $thread = $thread_field_item->entity;

    // Check if the current user is a participant in the thread.
    if ($thread->isParticipant($user_entity_to_check)) {
      return AccessResult::allowed()
        ->cachePerUser() // Access depends on the user and permissions.
        ->addCacheableDependency($thread)   // Cache depends on the thread entity.
        ->addCacheableDependency($message)  // Cache depends on the message entity.
        ->addCacheableDependency($user_entity_to_check); // Cache depends on the user being checked.
    } else {
      // User is not a participant.
      return AccessResult::forbidden('You are not a participant of this chat thread.')->addCacheableDependency($message)->addCacheableDependency($thread)->addCacheableDependency($user_entity_to_check);
    }
  }

  // For operations other than 'view' (e.g., 'update', 'delete'),
  // return Neutral to let other access mechanisms (like permissions) take over.
  // You might add more specific logic here later if needed (e.g., only sender can edit).
  return AccessResult::neutral()->addCacheableDependency($entity);
}

/**
 * Implements hook_ENTITY_TYPE_access() for match_thread entities.
 *
 * Grants 'view' access to threads for their participants (user1 or user2).
 */
function match_chat_match_thread_access(EntityInterface $entity, $operation, AccountInterface $account)
{
  /** @var \Drupal\match_chat\Entity\MatchThreadInterface $thread */
  $thread = $entity;

  // Only apply special logic for the 'view' operation.
  if ($operation === 'view') {
    if ($account->isAnonymous()) {
      return AccessResult::forbidden('Anonymous users cannot view chat threads.')
        ->addCacheableDependency($thread); // Good to add dependency on the object access is denied for
    }

    $user_entity_to_check = \Drupal::entityTypeManager()->getStorage('user')->load($account->id());
    if (!$user_entity_to_check instanceof UserInterface) {
      return AccessResult::neutral('Accessing account is not a recognized user.')->addCacheableDependency($thread);
    }

    // Use the isParticipant() method from the MatchThread entity.
    if ($thread->isParticipant($user_entity_to_check)) {
      return AccessResult::allowed()
        ->cachePerUser() // Access depends on the specific user.
        ->addCacheableDependency($thread) // Cache depends on the thread.
        ->addCacheableDependency($user_entity_to_check); // Cache depends on the user.
    } else {
      return AccessResult::forbidden('You are not a participant of this chat thread.')
        ->addCacheableDependency($thread) // Already good
        ->addCacheableDependency($user_entity_to_check); // Add if not there
    }
  }

  // For other operations, let other access mechanisms decide.
  return AccessResult::neutral()->addCacheableDependency($entity);
}

/**
 * Implements hook_file_download().
 *
 * Controls access to private files associated with match_message entities.
 * Only participants of the thread to which the message belongs should be
 * able to download/view the file.
 */
function match_chat_file_download($uri)
{
  // Check if the file URI is within our module's private path.
  // This ensures we only act on files relevant to this module.
  if (strpos($uri, 'private://match_chat_images/') !== 0) {
    // Not our file, let other modules handle it or apply default access.
    return NULL; // Returning NULL delegates to other modules or default behavior.
  }

  $current_user_account = \Drupal::currentUser();
  // Deny access if the user is anonymous.
  if ($current_user_account->isAnonymous()) {
    return -1; // -1 signifies access denied.
  }

  // Load the full User entity for the current user.
  $current_user_entity = \Drupal::entityTypeManager()->getStorage('user')->load($current_user_account->id());
  if (!$current_user_entity instanceof UserInterface) {
    return -1; // Should not happen for authenticated users, but acts as a safeguard.
  }

  // Load the file entity by its URI.
  /** @var \Drupal\file\FileInterface[] $files */
  $files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $uri]);
  if (empty($files)) {
    // File not found in the database or URI is incorrect.
    return -1;
  }
  /** @var \Drupal\file\FileInterface $file */
  $file = reset($files);
  $file_id = $file->id();

  // Find the match_message entity that references this file in its 'chat_images' field.
  // We disable entity access checks here because this hook *is* the access check.
  $message_storage = \Drupal::entityTypeManager()->getStorage('match_message');
  $query = $message_storage->getQuery()
    ->accessCheck(FALSE) // Important: Perform our own access check.
    ->condition('chat_images.target_id', $file_id) // Corrected field name.
    ->range(0, 1); // We only need one such message.
  $message_ids = $query->execute();

  if (empty($message_ids)) {
    // No message found that uses this specific file in the 'chat_images' field.
    return -1;
  }
  $message_id = reset($message_ids);
  /** @var \Drupal\match_chat\Entity\MatchMessageInterface $message */
  $message = $message_storage->load($message_id);

  if (!$message instanceof \Drupal\match_chat\Entity\MatchMessageInterface) {
    // Message entity could not be loaded, though its ID was found.
    return -1;
  }

  // Get the thread associated with the message.
  /** @var \Drupal\match_chat\Entity\MatchThreadInterface|null $thread */
  $thread_field_item = $message->get('thread_id');
  if ($thread_field_item->isEmpty() || !$thread_field_item->entity instanceof \Drupal\match_chat\Entity\MatchThreadInterface) {
    \Drupal::logger('match_chat')->warning('Message ID @mid has no valid thread for file download access check.', ['@mid' => $message->id()]);
    return -1; // Message is not properly linked to a thread.
  }
  $thread = $thread_field_item->entity;

  // Check if the current user is a participant in the thread using the method on the Thread entity.
  if ($thread->isParticipant($current_user_entity)) {
    // Returning an empty array grants download access and lets Drupal serve the file
    // with appropriate headers (e.g., Content-Type, Content-Disposition).
    return [];
  } else {
    // User is not a participant of the thread.
    return -1;
  }
}
